require("playercards/PlayerCardSpawner")

local allCardsBagApi = require("playercards/AllCardsBagApi")
local arkhamDb = require("arkhamdb/ArkhamDb")
local guidReferenceApi = require("core/GUIDReferenceApi")
local playermatApi = require("playermat/PlayermatApi")
local zones = require("playermat/Zones")

local matsWithInvestigator = {}
local startsInPlayCount = 0

local INPUT_FIELD_HEIGHT = 340
local INPUT_FIELD_WIDTH = 1500
local FIELD_COLOR = { 0.9, 0.7, 0.5 }

local PRIVATE_TOGGLE_LABELS = {}
PRIVATE_TOGGLE_LABELS[true] = "Private"
PRIVATE_TOGGLE_LABELS[false] = "Published"

local UPGRADED_TOGGLE_LABELS = {}
UPGRADED_TOGGLE_LABELS[true] = "Upgraded"
UPGRADED_TOGGLE_LABELS[false] = "Specific"

local STANDALONE_TOGGLE_LABELS = {}
STANDALONE_TOGGLE_LABELS[true] = "Yes"
STANDALONE_TOGGLE_LABELS[false] = "No"

redDeckId = ""
orangeDeckId = ""
whiteDeckId = ""
greenDeckId = ""

local privateDeck = true
local loadNewestDeck = true
local standalone = false

function onLoad(script_state)
  initializeUi(JSON.decode(script_state))
  math.randomseed(os.time())
  arkhamDb.initialize()
end

function onSave() return JSON.encode(getUiState()) end

-- Returns a table with the full state of the UI, including options and deck IDs.
-- This can be used to persist via onSave(), or provide values for a load operation
---@return uiStateTable uiStateTable Contains data about the current UI state
function getUiState()
  return {
    redDeck = redDeckId,
    orangeDeck = orangeDeckId,
    whiteDeck = whiteDeckId,
    greenDeck = greenDeckId,
    privateDeck = privateDeck,
    loadNewest = loadNewestDeck,
    standalone = standalone
  }
end

-- Updates the state of the UI based on the provided table. Any values not provided will be left the same.
---@param uiStateTable table Table of values to update on importer
function setUiState(uiStateTable)
  self.clearButtons()
  self.clearInputs()
  initializeUi(uiStateTable)
end

-- Sets up the UI for the deck loader, populating fields from the given save state table decoded from onLoad()
function initializeUi(savedUiState)
  if savedUiState ~= nil then
    redDeckId = savedUiState.redDeck
    orangeDeckId = savedUiState.orangeDeck
    whiteDeckId = savedUiState.whiteDeck
    greenDeckId = savedUiState.greenDeck
    privateDeck = savedUiState.privateDeck
    loadNewestDeck = savedUiState.loadNewest
    standalone = savedUiState.standalone
  end

  makeOptionToggles()
  makeDeckIdFields()
  makeBuildButton()
end

function makeOptionToggles()
  -- common parameters
  local cParams = {}
  cParams.function_owner = self
  cParams.width = 1750
  cParams.height = INPUT_FIELD_HEIGHT
  cParams.position = Vector( 0.22, 0.1, -0.102)
  cParams.scale = { 0.1, 0.1, 0.1 }
  cParams.font_size = 240
  cParams.hover_color = { 0.4, 0.6, 0.8 }
  cParams.color = FIELD_COLOR

  -- public / private deck
  cParams.click_function = "publishedPrivateChanged"
  cParams.tooltip = "Published or private deck?\n\nPLEASE USE A PRIVATE DECK IF JUST FOR TTS TO AVOID FLOODING ARKHAMDB PUBLISHED DECK LISTS!\n\nMake sure to enable deck sharing in your account settings.\n\nKeep this on 'Private' for arkham.build."
  cParams.label = PRIVATE_TOGGLE_LABELS[privateDeck]
  self.createButton(cParams)

  -- load upgraded?
  cParams.click_function = "loadUpgradedChanged"
  cParams.position.z = -0.01
  cParams.tooltip = "Load newest upgrade or exact deck?"
  cParams.label = UPGRADED_TOGGLE_LABELS[loadNewestDeck]
  self.createButton(cParams)

  -- standalone mode?
  cParams.click_function = "standaloneChanged"
  cParams.position.z = 0.081
  cParams.tooltip = "Are you playing standalone mode? Enabling this will make all 'Campaign Only' weaknesses ineligible when determining the random basic weakness(es)."
  cParams.label = STANDALONE_TOGGLE_LABELS[standalone]
  self.createButton(cParams)
end

-- Create the four deck ID entry fields
function makeDeckIdFields()
  local iParams = {}
  iParams.function_owner = self
  iParams.scale = { 0.1, 0.1, 0.1 }
  iParams.width = INPUT_FIELD_WIDTH
  iParams.height = INPUT_FIELD_HEIGHT
  iParams.font_size = 320
  iParams.tooltip = "Deck ID from ArkhamDB URL of the deck\nPublished URL: 'https://arkhamdb.com/decklist/view/101/knowledge-overwhelming-solo-deck-1.0' = '101'\nPrivate URL: 'https://arkhamdb.com/deck/view/102' = '102'\n\nAlso supports the deck ID from shared decks from arkham.build!"
  iParams.alignment = 3 -- Center
  iParams.color = FIELD_COLOR
  iParams.font_color = { 0, 0, 0 }
  iParams.validation = 4 -- alphanumeric (to support arkham.build IDs)

  -- Green
  iParams.input_function = "greenDeckChanged"
  iParams.position = { -0.16, 0.1, 0.385 }
  iParams.value = greenDeckId
  self.createInput(iParams)

  -- Red
  iParams.input_function = "redDeckChanged"
  iParams.position = { 0.165, 0.1, 0.385 }
  iParams.value = redDeckId
  self.createInput(iParams)

  -- White
  iParams.input_function = "whiteDeckChanged"
  iParams.position = { -0.16, 0.1, 0.474 }
  iParams.value = whiteDeckId
  self.createInput(iParams)

  -- Orange
  iParams.input_function = "orangeDeckChanged"
  iParams.position = { 0.165, 0.1, 0.474 }
  iParams.value = orangeDeckId
  self.createInput(iParams)
end

-- Create the Build All button. This is a transparent button which covers the Build All portion of the background graphic
function makeBuildButton()
  local buttonParameters = {}
  buttonParameters.click_function = "loadDecks"
  buttonParameters.function_owner = self
  buttonParameters.position = { 0, 0.1, 0.71 }
  buttonParameters.width = 320
  buttonParameters.height = 30
  buttonParameters.color = { 0, 0, 0, 0 }
  buttonParameters.tooltip = "Click to build all four decks!"
  self.createButton(buttonParameters)
end

-- Event handlers for deck ID change
function redDeckChanged(_, _, inputValue) redDeckId = inputValue end
function orangeDeckChanged(_, _, inputValue) orangeDeckId = inputValue end
function whiteDeckChanged(_, _, inputValue) whiteDeckId = inputValue end
function greenDeckChanged(_, _, inputValue) greenDeckId = inputValue end

-- Event handlers for toggle buttons
function publishedPrivateChanged()
  privateDeck = not privateDeck
  self.editButton({ index = 0, label = PRIVATE_TOGGLE_LABELS[privateDeck] })
end

function loadUpgradedChanged()
  loadNewestDeck = not loadNewestDeck
  self.editButton({ index = 1, label = UPGRADED_TOGGLE_LABELS[loadNewestDeck] })
end

function standaloneChanged()
  standalone = not standalone
  self.editButton({ index = 2, label = STANDALONE_TOGGLE_LABELS[standalone] })
end

-- start the deck importing process
function loadDecks()
  co = coroutine.create(loadDecksCoroutine)
  resumeLoadDecks()
end

-- perform the deck importing (with a pause after each deck load)
-- this pause will for example allow weaknesses to be spawned so that the RBW drawing can detect them
function loadDecksCoroutine()
  if not allCardsBagApi.isIndexReady() then return end
  matsWithInvestigator = playermatApi.getUsedMatColors()

  for _, matColor in ipairs({"White", "Orange", "Green", "Red"}) do
    local deckId = _G[string.lower(matColor) .. "DeckId"]
    if deckId ~= nil and deckId ~= "" then
      buildDeck(matColor, deckId)
      coroutine.yield()
    end
  end
end

-- resume the deck importing process
function resumeLoadDecks()
  if co and coroutine.status(co) ~= "dead" then
    local status, err = coroutine.resume(co)
    if not status then error(err) end
  end
end

-- Returns the zone name where the specified card should be placed, based on its metadata.
---@param cardMetadata table  Contains card metadata
---@return string Zone Name of the zone such as "Deck", "SetAside1", etc. (See zones file for a list of valid zones)
function getDefaultCardZone(cardMetadata, bondedList)
  if cardMetadata.id == "09080-m" then -- Have to check the Servitor before other minicards
    return "SetAside6"
  elseif cardMetadata.id == "09006" then -- On The Mend is set aside
    return "SetAside2"
  elseif cardMetadata.id == "06233" or cardMetadata.id == "06275" then -- False Awakening is set aside
    return "SetAside2"
  elseif bondedList[cardMetadata.id] then
    return "SetAside2"
  elseif cardMetadata.type == "Investigator" then
    return "Investigator"
  elseif cardMetadata.type == "Minicard" then
    return "Minicard"
  elseif cardMetadata.type == "UpgradeSheet" then
    return "SetAside4"
  elseif cardMetadata.startsInPlay then
    return startsInPlayTracker()
  elseif cardMetadata.permanent then
    return "SetAside1"
    -- SetAside3 is used for Ancestral Knowledge / Underworld Market
  else
    return "Deck"
  end
end

function startsInPlayTracker()
  startsInPlayCount = startsInPlayCount + 1
  if startsInPlayCount > 6 then
    broadcastToAll("Card that should start in play was placed with permanents because no blank slots remained")
    return "SetAside1"
  else
    return "Blank" .. startsInPlayCount
  end
end

function buildDeck(playerColor, deckId)
  local uiState = getUiState()
  arkhamDb.getDecklist(
    playerColor,
    deckId,
    uiState.privateDeck,
    uiState.loadNewest,
    uiState.standalone,
    loadCards)
end

-- Process the slot list, which defines the card Ids and counts of cards to load. Spawn those cards
-- at the appropriate zones and report an error to the user if any could not be loaded.
-- This is a callback function which handles the results of ArkhamDb.getDecklist()
-- This method uses an encapsulated coroutine with yields to make the card spawning cleaner.
---@param slots table Key-Value table of cardId:count
---@param investigatorId string ArkhamDB ID (code) for this deck's investigator.
--     Investigator cards should already be added to the slots list if they should be spawned,
--     but this value is separate to check for special handling for certain investigators
---@param bondedList table A table of cardID keys to meaningless values. Card IDs in this list were added
--     from a parent bonded card.
---@param customizations table ArkhamDB data for customizations on customizable cards
---@param playerColor string Color name of the player mat to place this deck on (e.g. "Red")
---@param loadAltInvestigator string Contains the name of alternative art for the investigator ("normal", "revised" or "promo")
function loadCards(slots, investigatorId, bondedList, customizations, playerColor, loadAltInvestigator)
  function coinside()
    local cardsToSpawn = {}
    local resourceModifier = 0

    -- reset the startsInPlayCount
    startsInPlayCount = 0
    for cardId, cardCount in pairs(slots) do
      local card = allCardsBagApi.getCardById(cardId)
      if card ~= nil then
        local cardZone = getDefaultCardZone(card.metadata, bondedList)
        for i = 1, cardCount do
          table.insert(cardsToSpawn, { data = card.data, metadata = card.metadata, zone = cardZone })
        end
        slots[cardId] = 0
      end

      -- check for resource modifiers
      if cardId == "02037" then -- Indebted
        resourceModifier = resourceModifier - 2 * cardCount
      elseif cardId == "05278" then -- Another Day, Another Dollar
        resourceModifier = resourceModifier + 2 * cardCount
      end
    end

    updateStartingResources(playerColor, resourceModifier)
    handleAncestralKnowledge(cardsToSpawn)
    handleUnderworldMarket(cardsToSpawn, playerColor)
    handleHunchDeck(investigatorId, cardsToSpawn, bondedList, playerColor)
    handleSpiritDeck(investigatorId, cardsToSpawn, playerColor, customizations)
    handleCustomizableUpgrades(cardsToSpawn, customizations)
    handlePeteSignatureAssets(investigatorId, cardsToSpawn)

    -- Split the card list into separate lists for each zone
    local zoneDecks = buildZoneLists(cardsToSpawn)

    -- Check for existing cards in zones and maybe skip them
    removeBusyZones(playerColor, zoneDecks)

    -- Spawn the list for each zone
    for zone, zoneCards in pairs(zoneDecks) do
      local deckPos = zones.getZonePosition(playerColor, zone):setAt("y", 3)
      local deckRot = zones.getDefaultCardRotation(playerColor, zone)
      local callback = nil

      -- If cards are spread too close together TTS groups them weirdly, selecting multiples
      -- when hovering over a single card. This distance is the minimum to avoid that.
      local spreadDistance = 1.15
      if (zone == "SetAside4") then
        -- SetAside4 is reserved for customization cards, and we want them spread on the table
        -- so their checkboxes are visible
        -- TO-DO: take into account that spreading will make multiple rows
        -- (this is affected by the user's local settings!)
        if (playerColor == "White") then
          deckPos.z = deckPos.z + (#zoneCards - 1) * spreadDistance
        elseif (playerColor == "Green") then
          deckPos.x = deckPos.x + (#zoneCards - 1) * spreadDistance
        end
        callback = function(deck) deck.spread(spreadDistance) end
      elseif zone == "Deck" then
        callback = function(deck) deckSpawned(deck, playerColor) end
      elseif zone == "Investigator" or zone == "Minicard" then
        callback = function(card) loadAltArt(card, loadAltInvestigator) end
      end
      Spawner.spawnCards(zoneCards, deckPos, deckRot, true, callback)
      coroutine.yield(0)
    end

    -- Look for any cards which haven't been loaded
    local hadError = false
    for cardId, remainingCount in pairs(slots) do
      if remainingCount > 0 then
        hadError = true
        arkhamDb.logCardNotFound(cardId, playerColor)
      end
    end
    if (not hadError) then
      printToAll("Deck loaded successfully!", playerColor)
    end
    resumeLoadDecks()
    return 1
  end

  startLuaCoroutine(self, "coinside")
end

-- Callback handler for the main deck spawning. Looks for cards which should start in hand, and
-- draws them for the appropriate player.
---@param deck tts__Object Callback-provided spawned deck object
---@param playerColor string Color of the player to draw the cards to
function deckSpawned(deck, playerColor)
  local player = Player[playermatApi.getPlayerColor(playerColor)]
  local handPos = player.getHandTransform(1).position -- Only one hand zone per player
  local deckCards = deck.getData().ContainedObjects

  -- Process in reverse order so taking cards out doesn't upset the indexing
  for i = #deckCards, 1, -1 do
    local cardMetadata = JSON.decode(deckCards[i].GMNotes) or {}
    if cardMetadata.startsInHand then
      deck.takeObject({ index = i - 1, position = handPos, flip = true, smooth = true })
    end
  end

  -- add the "PlayerCard" tag to the deck
  if deck and deck.type == "Deck" and deck.getQuantity() > 1 then
    deck.addTag("PlayerCard")
  end
end

-- Converts the Raven Quill's selections from card IDs to card names. This could be more elegant
-- but the inputs are very static so we're using some brute force.
---@param selectionString string provided by ArkhamDB, indicates the customization selections
--     Should be either a single card ID or two separated by a ^ (e.g. XXXXX^YYYYY)
function convertRavenQuillSelections(selectionString)
  if string.len(selectionString) == 5 then
    return getCardName(selectionString)
  elseif string.len(selectionString) == 11 then
    return getCardName(string.sub(selectionString, 1, 5)) .. ", " .. getCardName(string.sub(selectionString, 7))
  end
end

-- Converts Grizzled's selections from a single string with "^".
---@param selectionString string provided by ArkhamDB, indicates the customization selections
--     Should be two traits separated by a ^ (e.g. XXXXX^YYYYY)
function convertGrizzledSelections(selectionString)
  return selectionString:gsub("%^", ", ")
end

-- Returns the simple name of a card given its ID. This will find the card and strip any trailing
-- SCED-specific suffixes such as (Taboo) or (Level)
function getCardName(cardId)
  local card = allCardsBagApi.getCardById(cardId)
  if card then
    local name = card.data.Nickname
    if string.find(name, " %(") then
      return string.sub(name, 1, string.find(name, " %(") - 1)
    else
      return name
    end
  end
end

-- Split a single list of cards into a separate table of lists, keyed by the zone
---@param cards table Table of {cardData, cardMetadata, zone}
---@return table zoneDecks Table with zoneName as index: {zoneName=card list}
function buildZoneLists(cards)
  local zoneList = {}
  for _, card in ipairs(cards) do
    if zoneList[card.zone] == nil then
      zoneList[card.zone] = {}
    end
    table.insert(zoneList[card.zone], card)
  end

  return zoneList
end

-- removes zones from list if they are occupied
---@param playerColor string Color this deck is being loaded for
---@param zoneDecks table Table with zoneName as index: {zoneName=card list}
function removeBusyZones(playerColor, zoneDecks)
  -- check for existing investigator
  for _, matColor in ipairs(matsWithInvestigator) do
    if matColor == playerColor then
      zoneDecks["Investigator"] = nil
      printToAll("Skipped investigator import", playerColor)
      break
    end
  end

  -- check for existing minicard
  local mat = guidReferenceApi.getObjectByOwnerAndType(playerColor, "Playermat")
  local activeInvestigatorData = playermatApi.getActiveInvestigatorData(playerColor)
  local miniId = activeInvestigatorData.id .. "-m"

  -- remove taboo suffix since we don't have this for minicards
  miniId = miniId:gsub("-t", "")

  for _, obj in ipairs(getObjectsWithTag("Minicard")) do
    local notes = JSON.decode(obj.getGMNotes())
    if notes ~= nil and notes.id == miniId then
      local pos = mat.positionToWorld(Vector(-1.36, 0, -0.625)):setAt("y", 1.67)
      obj.setPosition(pos)
      zoneDecks["Minicard"] = nil
      printToAll("Skipped minicard import", playerColor)
      break
    end
  end

  -- check for existing deck
  local cardsInDeckArea = 0
  for _, obj in pairs(playermatApi.getDeckAreaObjects(playerColor)) do
    if obj.type == "Card" then
      cardsInDeckArea = cardsInDeckArea + 1
    elseif obj.type == "Deck" then
      cardsInDeckArea = cardsInDeckArea + #obj.getObjects()
    end
  end

  -- threshhold of 16 cards for skipping deck import to cover cases like Tekeli-li cards
  if cardsInDeckArea > 16 then
    for i = 1, 6 do
      zoneDecks["SetAside" .. i] = nil
      zoneDecks["Blank" .. i] = nil
    end
    zoneDecks["Deck"] = nil
    printToAll("Skipped deck import", playerColor)
  end
end

-- Check to see if the deck list has Ancestral Knowledge. If it does, move 5 random skills to SetAside3
---@param cardList table Deck list being created
function handleAncestralKnowledge(cardList)
  local hasAncestralKnowledge = false
  local skillList = {}

  -- Have to process the entire list to check for Ancestral Knowledge and get all possible skills, so do both in one pass
  for i, card in ipairs(cardList) do
    if card.metadata.id == "07303" then
      hasAncestralKnowledge = true
      card.zone = "SetAside3"
    elseif (card.metadata.type == "Skill"
        and card.zone == "Deck"
        and not card.metadata.weakness) then
      table.insert(skillList, i)
    end
  end

  if not hasAncestralKnowledge then return end

  -- Move 5 random skills to SetAside3
  for i = 1, 5 do
    local skillListIndex = math.random(#skillList)
    cardList[skillList[skillListIndex]].zone = "UnderSetAside3"
    table.remove(skillList, skillListIndex)
  end
end

-- Check for and handle Underworld Market by moving all Illicit cards to UnderSetAside3
---@param cardList table Deck list being created
---@param playerColor string Color this deck is being loaded for
function handleUnderworldMarket(cardList, playerColor)
  local hasMarket = false
  local illicitList = {}

  -- Process the entire list to check for Underworld Market and get all possible Illicit cards, doing both in one pass
  for i, card in ipairs(cardList) do
    if card.metadata.id == "09077" then
      hasMarket = true
      card.zone = "SetAside3"
    elseif card.metadata.traits ~= nil and string.find(card.metadata.traits, "Illicit", 1, true) and card.zone == "Deck" then
      table.insert(illicitList, i)
    end
  end

  if not hasMarket then return end

  if #illicitList < 10 then
    printToAll("Only " .. #illicitList .. " Illicit cards in your deck, you can't trigger Underworld Market's ability.", playerColor)
  else
    -- Process cards to move them to the market deck. This is done in reverse order because the sorting needs
    -- to be reversed (deck sorts for face down). Performance here may be an issue, as table.remove() is an O(n)
    -- operation which makes the full shift O(n^2). But keep it simple unless it becomes a problem
    for i = #illicitList, 1, -1 do
      local moving = cardList[illicitList[i]]
      moving.zone = "UnderSetAside3"
      table.remove(cardList, illicitList[i])
      table.insert(cardList, moving)
    end

    if #illicitList > 10 then
      printToAll("Moved all " .. #illicitList .. " Illicit cards to the Market deck, reduce it to 10", playerColor)
    else
      printToAll("Built the Market deck", playerColor)
    end
  end
end

-- If the investigator is Joe Diamond, extract all Insight events to SetAside5 to build the Hunch Deck
---@param investigatorId string ID for the deck's investigator card
---@param cardList table Deck list being created
---@param playerColor string Color this deck is being loaded for
function handleHunchDeck(investigatorId, cardList, bondedList, playerColor)
  if investigatorId ~= "05002" then return end

  local insightList = {}
  for i, card in ipairs(cardList) do
    if (card.metadata.type == "Event"
        and card.metadata.traits ~= nil
        and string.match(card.metadata.traits, "Insight")
        and bondedList[card.metadata.id] == nil) then
      table.insert(insightList, i)
    end
  end

  -- Process cards to move them to the hunch deck. This is done in reverse order because the sorting needs
  -- to be reversed (deck sorts for face down). Performance here may be an issue, as table.remove() is an O(n)
  -- operation which makes the full shift O(n^2). But keep it simple unless it becomes a problem
  for i = #insightList, 1, -1 do
    local moving = cardList[insightList[i]]
    moving.zone = "SetAside5"
    table.remove(cardList, insightList[i])
    table.insert(cardList, moving)
  end

  if #insightList < 11 then
    printToAll("Joe's hunch deck must have 11 cards but the deck only has " .. #insightList .. " Insight events.", playerColor)
  elseif #insightList > 11 then
    printToAll("Moved all " .. #insightList .. " Insight events to the hunch deck, reduce it to 11.", playerColor)
  else
    printToAll("Built Joe's hunch deck", playerColor)
  end
end

-- If the investigator is Parallel Jim Culver, extract all Ally assets to SetAside5 to build the Spirit Deck
---@param investigatorId string ID for the deck's investigator card
---@param cardList table Deck list being created
---@param playerColor string Color this deck is being loaded for
---@param customizations table Additional deck information
function handleSpiritDeck(investigatorId, cardList, playerColor, customizations)
  if investigatorId ~= "02004-p" and investigatorId ~= "02004-pb" then return end

  local spiritList = {}
  if customizations["extra_deck"] then
    -- split by ","
    for str in string.gmatch(customizations["extra_deck"], "([^,]+)") do
      local card = allCardsBagApi.getCardById(str)
      if card ~= nil then
        table.insert(cardList, { data = card.data, metadata = card.metadata, zone = "SetAside5" })
        table.insert(spiritList, str)
      end
    end
  else
    for i, card in ipairs(cardList) do
      if card.metadata.id == "90053" or (
          card.metadata.type == "Asset"
          and card.metadata.traits ~= nil
          and string.match(card.metadata.traits, "Ally")
          and card.metadata.level ~= nil
          and card.metadata.level < 3) then
        table.insert(spiritList, i)
      end
    end

    -- Process cards to move them to the spirit deck. This is done in reverse order because the sorting needs
    -- to be reversed (deck sorts for face down). Performance here may be an issue, as table.remove() is an O(n)
    -- operation which makes the full shift O(n^2). But keep it simple unless it becomes a problem
    for i = #spiritList, 1, -1 do
      local moving = cardList[spiritList[i]]
      moving.zone = "SetAside5"
      table.remove(cardList, spiritList[i])
      table.insert(cardList, moving)
    end
  end

  if #spiritList < 10 then
    printToAll("Jim's spirit deck must have 9 Ally assets but the deck only has " .. (#spiritList - 1) .. " Ally assets.", playerColor)
  elseif #spiritList > 11 then
    printToAll("Moved all " .. (#spiritList - 1) .. " Ally assets to the spirit deck, reduce it to 10 (including Vengeful Shade).", playerColor)
  else
    printToAll("Built Jim's spirit deck", playerColor)
  end
end

-- For any customization upgrade cards in the card list, process the metadata from the deck to
-- set the save state to show the correct checkboxes/text field values
---@param cardList table Deck list being created
---@param customizations table ArkhamDB data for customizations on customizable cards
function handleCustomizableUpgrades(cardList, customizations)
  for _, card in ipairs(cardList) do
    if card.metadata.type == "UpgradeSheet" then
      local baseId = string.sub(card.metadata.id, 1, 5)
      local upgrades = customizations["cus_" .. baseId]

      if upgrades ~= nil then
        -- contains the amount of markedBoxes (left to right) per row (starting at row 1)
        local selectedUpgrades = {}

        -- contains the amount of inputValues per row (starting at row 0)
        local index_xp = {}

        -- get the index and xp values (looks like this: X|X,X|X, ..)
        -- input string from ArkhamDB is split by ","
        for str in string.gmatch(customizations["cus_" .. baseId], "([^,]+)") do
          table.insert(index_xp, str)
        end

        -- split each pair and assign it to the proper position in markedBoxes
        for _, entry in ipairs(index_xp) do
          -- counter increments from 1 to 3 and indicates the part of the string we are on
          -- usually: 1 = row, 2 = amount of check boxes, 3 = entry in inputfield
          local counter = 0
          local row     = 0

          -- parsing the string for each row
          for str in entry:gmatch("([^|]+)") do
            counter = counter + 1

            if counter == 1 then
              row = tonumber(str) + 1
            elseif counter == 2 then
              if selectedUpgrades[row] == nil then
                selectedUpgrades[row] = {}
              end
              selectedUpgrades[row].xp = tonumber(str)
            elseif counter == 3 and str ~= "" then
              if baseId == "09042" then
                selectedUpgrades[row].text = convertRavenQuillSelections(str)
              elseif baseId == "09101" then
                selectedUpgrades[row].text = convertGrizzledSelections(str)
              elseif baseId == "09079" then -- Living Ink skill selection
                -- All skills, regardless of row, are placed in upgrade slot 1 as a comma-delimited list
                if selectedUpgrades[1] == nil then
                  selectedUpgrades[1] = {}
                end
                if selectedUpgrades[1].text == nil then
                  selectedUpgrades[1].text = str
                else
                  selectedUpgrades[1].text = selectedUpgrades[1].text .. "," .. str
                end
              else
                selectedUpgrades[row].text = str
              end
            end
          end
        end

        -- write the loaded values to the save_data of the sheets
        card.data["LuaScriptState"] = JSON.encode({ selections = selectedUpgrades })
      end
    end
  end
end

-- Handles cards that start in play under specific conditions for Ashcan Pete (Regular Pete - Duke, Parallel Pete - Guitar)
---@param investigatorId string ID for the deck's investigator card
---@param cardList table Deck list being created
function handlePeteSignatureAssets(investigatorId, cardList)
  if investigatorId == "02005" or investigatorId == "02005-pb" then -- regular Pete's front
    for _, card in ipairs(cardList) do
      if card.metadata.id == "02014" then -- Duke
        card.zone = startsInPlayTracker()
      end
    end
  elseif investigatorId == "02005-p" or investigatorId == "02005-pf" then -- parallel Pete's front
    for _, card in ipairs(cardList) do
      if card.metadata.id == "90047" then -- Pete's Guitar
        card.zone = startsInPlayTracker()
      end
    end
  end
end

-- Callback function for investigator cards and minicards to set the correct state for alt art
---@param card tts__Object Card which needs to be set the state for
---@param loadAltInvestigator string Contains the name of alternative art for the investigator ("normal", "revised" or "promo")
function loadAltArt(card, loadAltInvestigator)
  -- states are set up this way:
  -- 1 - normal, 2 - revised/promo, 3 - promo (if 2 is revised)
  -- This means we can always load the 2nd state for revised and just get the last state for promo
  if loadAltInvestigator == "normal" then
    return
  elseif loadAltInvestigator == "revised" then
    card.setState(2)
  elseif loadAltInvestigator == "promo" then
    local states = card.getStates()
    card.setState(#states)
  end
end

-- updates the starting resources
---@param playerColor string Color this deck is being loaded for
---@param resourceModifier number Modifier for the starting resources
function updateStartingResources(playerColor, resourceModifier)
  if resourceModifier ~= 0 then
    playermatApi.updateCounter(playerColor, "ResourceCounter", _, resourceModifier)
    printToAll("Modified starting resources", playerColor)
  end
end
