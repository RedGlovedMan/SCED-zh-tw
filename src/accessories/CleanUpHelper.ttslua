-- Cleans up the table for the next scenario in a campaign:
-- sets counters to default values (resources and doom) or trauma values (health and sanity, if not disabled) from campaign log
-- puts everything on playermats and hands into respective trashcans
-- use the IGNORE_TAG to exclude objects from tidying (default: "CleanUpHelper_Ignore")

local blessCurseManagerApi      = require("chaosbag/BlessCurseManagerApi")
local chaosBagApi               = require("chaosbag/ChaosBagApi")
local guidReferenceApi          = require("core/GUIDReferenceApi")
local mythosAreaApi             = require("core/MythosAreaApi")
local playAreaApi               = require("core/PlayAreaApi")
local playermatApi              = require("playermat/PlayermatApi")
local searchLib                 = require("util/SearchLib")
local soundCubeApi              = require("core/SoundCubeApi")
local tokenSpawnTrackerApi      = require("core/token/TokenSpawnTrackerApi")

-- objects with this tag will be ignored
local IGNORE_TAG                = "CleanUpHelper_ignore"

-- colors and order for following tables
local COLORS                    = { "White", "Orange", "Green", "Red" }
local campaignLog
local RESET_VALUES              = {}
local loadingFailedBefore       = false
local optionsVisible            = false
local options                   = {
  ["importTrauma"] = true,
  ["tidyPlayermats"] = true,
  ["removeDrawnLines"] = false
}
local removeIgnoreLater         = {}

-- don't clean playermats for preludes
local scenarioName
local preludeList               = {
  ["Prelude: Welcome to Hemlock Vale!"] = true
}

local buttonParameters          = {}
buttonParameters.function_owner = self

---------------------------------------------------------
-- option loading and GUI setup
---------------------------------------------------------

function onSave()
  return JSON.encode({ options = options })
end

function onLoad(savedData)
  if savedData ~= nil then
    local loadedData = JSON.decode(savedData)
    options = loadedData.options
    -- update UI to match saved state
    for id, state in pairs(options) do
      self.UI.setAttribute(id, "image", state and "option_on" or "option_off")
    end
  end

  -- index 0: button as label
  buttonParameters.label          = "Clean Up Helper"
  buttonParameters.click_function = "none"
  buttonParameters.position       = { x = 0, y = 0.1, z = -1.3 }
  buttonParameters.height         = 0
  buttonParameters.width          = 0
  buttonParameters.font_size      = 230
  buttonParameters.font_color     = Color(0, 0, 0)
  self.createButton(buttonParameters)

  -- index 1: option button
  buttonParameters.label          = "Settings"
  buttonParameters.click_function = "showOrHideOptions"
  buttonParameters.color          = { 0, 0, 0, 0.96 }
  buttonParameters.position.z     = -0.1
  buttonParameters.height         = 350
  buttonParameters.width          = 1000
  buttonParameters.font_size      = 190
  buttonParameters.font_color     = "White"
  self.createButton(buttonParameters)

  -- index 2: start button
  buttonParameters.label          = "Reset play areas"
  buttonParameters.click_function = "cleanUp"
  buttonParameters.position.z     = 1.1
  buttonParameters.width          = 1550
  self.createButton(buttonParameters)
end

---------------------------------------------------------
-- click functions for option buttons
---------------------------------------------------------

-- changes the UI state and the internal variable for the togglebuttons
function optionButtonClick(_, id)
  local currentState = options[id]
  local newState = (currentState and "option_off" or "option_on")
  options[id] = not currentState
  self.UI.setAttribute(id, "image", newState)
end

-- shows or hides the option panel
function showOrHideOptions()
  optionsVisible = not optionsVisible

  if optionsVisible then
    self.UI.show("options")
  else
    self.UI.hide("options")
  end
end

---------------------------------------------------------
-- main function
---------------------------------------------------------

function cleanUp(_, color)
  printToAll("------------------------------", "White")
  printToAll("Clean up started!", "Orange")
  printToAll("Resetting counters...", "White")

  getScenarioName()
  soundCubeApi.playSoundByName("Vacuum")
  ignoreCustomDataHelper()
  getTrauma()

  -- delay to account for potential state change of campaign log
  Wait.time(updateCounters, 0.2)

  resetDoomCounter()
  blessCurseManagerApi.removeAll(color)
  removeLines()
  returnMiniCards()
  discardHands()
  chaosBagApi.returnChaosTokens()
  chaosBagApi.releaseAllSealedTokens(color)
  maybeIgnoreTekeliliCards()

  printToAll("Tidying main play area...", "White")
  startLuaCoroutine(self, "tidyPlayareaCoroutine")
end

---------------------------------------------------------
-- modular functions, called by other functions
---------------------------------------------------------

function getScenarioName()
  local tokenData = mythosAreaApi.returnTokenData()
  scenarioName = tokenData.currentScenario
end

function updateCounters()
  if not getOptionValue() then return end

  playermatApi.updateCounter("All", "ResourceCounter", 5)
  playermatApi.updateCounter("All", "ClickableClueCounter", 0)
  playermatApi.resetSkillTracker("All")

  for i, color in ipairs(COLORS) do
    playermatApi.updateCounter(color, "DamageCounter", RESET_VALUES.Damage[i])
    playermatApi.updateCounter(color, "HorrorCounter", RESET_VALUES.Horror[i])
  end
end

-- reset doom on agenda
function resetDoomCounter()
  local doomCounter = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DoomCounter")
  if doomCounter ~= nil then
    doomCounter.call("updateVal")
  else
    printToAll("Doom counter could not be found.", "Yellow")
  end
end

-- adds the ignore tag to the custom data helper
function ignoreCustomDataHelper()
  local customDataHelper = playAreaApi.getCustomDataHelper()
  if customDataHelper then
    customDataHelper.addTag(IGNORE_TAG)
  end
end

-- read values for trauma from campaign log if enabled
function getTrauma()
  RESET_VALUES = {
    Damage = { 0, 0, 0, 0 },
    Horror = { 0, 0, 0, 0 }
  }

  -- stop here if trauma import is disabled
  if not options["importTrauma"] then
    printToAll("Default values for health and sanity loaded.", "Yellow")
    return
  end

  -- get campaign log
  campaignLog = getObjectsWithTag("CampaignLog")[1]
  if campaignLog == nil then
    printToAll("Campaign log not found in standard position!", "Yellow")
    printToAll("Default values for health and sanity loaded.", "Yellow")
    return
  end
  loadTrauma()
end

-- gets data from campaign log if possible
function loadTrauma()
  -- check if "returnTrauma" function exists to avoid calling nil
  local trauma = campaignLog.getVar("returnTrauma")

  if trauma ~= nil then
    printToAll("Trauma values found in campaign log!", "Green")
    trauma = campaignLog.call("returnTrauma")
    for i = 1, 8 do
      if i < 5 then
        RESET_VALUES.Damage[i] = trauma[i]
      else
        RESET_VALUES.Horror[i - 4] = trauma[i]
      end
    end
    loadingFailedBefore = false
  elseif loadingFailedBefore then
    printToAll("Trauma values could not be found in campaign log!", "Yellow")
    printToAll("Default values for health and sanity loaded.", "Yellow")
    loadingFailedBefore = false
  else
    -- set campaign log to first state
    local stateId = campaignLog.getStateId()

    if stateId ~= 1 then
      campaignLog = campaignLog.setState(1)
    end
    loadingFailedBefore = true

    -- small delay to account for potential state change
    Wait.time(loadTrauma, 0.1)
  end
end

-- remove drawn lines
function removeLines()
  if options["removeDrawnLines"] then
    printToAll("Removing global vector lines...", "White")
    Global.setVectorLines({})
  end
end

-- returns the mini cards back to the owning mat
function returnMiniCards()
  -- stop if playermats get tidied anyway
  if getOptionValue() then return end

  -- get mini cards in play
  local miniCardIndex = {}
  for _, obj in ipairs(getObjectsWithTag("Minicard")) do
    local notes = JSON.decode(obj.getGMNotes())
    if notes ~= nil and notes.id then
      miniCardIndex[notes.id] = obj
    end
  end

  -- move mini cards
  for _, mat in pairs(guidReferenceApi.getObjectsByType("Playermat")) do
    local miniId = mat.getVar("activeInvestigatorId") .. "-m"
    if miniCardIndex[miniId] then
      local pos = mat.positionToWorld(Vector(-1.36, 0, -0.625)):setAt("y", 1.67)
      miniCardIndex[miniId].setPosition(pos)
    end
  end
end

-- discard all hand objects
function discardHands()
  if not getOptionValue() then return end
  for _, color in ipairs(COLORS) do
    local trash = guidReferenceApi.getObjectByOwnerAndType(color, "Trash")
    if trash then
      local hand = Player[playermatApi.getPlayerColor(color)].getHandObjects()
      for j = #hand, 1, -1 do
        trash.putObject(hand[j])
      end
    end
  end
end

-- maybe ignore cards / decks on the tekelili helper
function maybeIgnoreTekeliliCards()
  local tekeliliHelper = getTekeliliHelper()
  if tekeliliHelper then
    removeIgnoreLater = searchLib.onObject(tekeliliHelper, "isCardOrDeck")
    for _, obj in ipairs(removeIgnoreLater) do
      obj.addTag(IGNORE_TAG)
    end
  end
end

-- clean up for play area
function tidyPlayareaCoroutine()
  coWaitFrames(10)

  local trash = guidReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  local playAreaZone = guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")

  -- reset the playarea image by not providing an image
  playAreaApi.updateSurface()

  if playAreaZone == nil then
    printToAll("Scripting zone for main play area could not be found!", "Red")
  elseif trash == nil then
    printToAll("Trashcan for main play area could not be found!", "Red")
  else
    for _, obj in ipairs(playAreaZone.getObjects()) do
      -- ignore these elements
      if obj.hasTag(IGNORE_TAG) == false
          and obj.locked == false
          and obj.interactable == true then
        coroutine.yield(0)
        trash.putObject(obj)
      end
    end
  end

  printToAll("Tidying playermats and mythos area...", "White")
  startLuaCoroutine(self, "tidyPlayerMatCoroutine")
  return 1
end

-- clean up for the four playermats and the mythos area
function tidyPlayerMatCoroutine()
  local tekeliliHelper = getTekeliliHelper()

  if getOptionValue() then
    for _, color in ipairs(COLORS) do
      local trash = guidReferenceApi.getObjectByOwnerAndType(color, "Trash")
      if trash == nil then
        printToAll("Trashcan for " .. color .. " playermat could not be found! Skipping this playermat.", "Yellow")
      else
        coWaitFrames(20)

        -- maybe store tekelili cards
        if tekeliliHelper then
          tekeliliHelper.call("storeTekelili", color)
        end

        -- parse playermat objects
        for _, obj in ipairs(playermatApi.searchAroundPlayermat(color)) do
          -- reset action tokens
          if obj.hasTag("UniversalToken") and obj.is_face_down then
            obj.flip()
          end

          -- get rid of temporary tokens
          if obj.hasTag("Temporary") then
            trash.putObject(obj)
          end

          -- remove objects (with exceptions)
          maybeTrashObject(obj, trash)
        end

        coWaitFrames(5)

        -- maybe respawn tekelili cards
        if tekeliliHelper then
          tekeliliHelper.call("spawnStoredTekelili", color)
        end
      end
    end

    -- reset "activeInvestigatorId" and "...class"
    playermatApi.setActiveInvestigatorData("All", {class = "Neutral", id = "00000"})
    playermatApi.updateTexture("All")
  end

  -- mythos area cleanup
  local trash = guidReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  if trash then
    for _, obj in ipairs(searchLib.inArea({ -2, 2, 10 }, { 0, 270, 0 }, { 55, 1, 13.5 })) do
      maybeTrashObject(obj, trash)
    end
  end

  -- maybe remove ignore tag from cards / decks on the tekelili helper
  if removeIgnoreLater then
    for _, obj in ipairs(removeIgnoreLater) do
      if obj ~= nil then
        obj.removeTag(IGNORE_TAG)
      end
    end
    removeIgnoreLater = {}
  end

  -- reset spawned data
  tokenSpawnTrackerApi.resetAll()
  local datahelper = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DataHelper")
  if datahelper then
    datahelper.setTable("SPAWNED_PLAYER_CARD_GUIDS", {})
  end

  printToAll("Clean up completed!", "Green")
  return 1
end

-- used to detect the "Tekeli-li Helper" for Edge of the Earth
function getTekeliliHelper()
  for _, obj in ipairs(getObjects()) do
    if obj ~= nil and obj.getName() == "Tekeli-li Helper" then
      return obj
    end
  end
  return nil
end

function maybeTrashObject(obj, trash)
  if not obj.hasTag(IGNORE_TAG)
      and (not obj.hasTag("UniversalToken") or obj.getScale().x < 0.4)
      and not obj.hasTag("chaosBag")
      and (not obj.locked or obj.hasTag("Investigator"))
      and obj.interactable then
    trash.putObject(obj)
  end
end

-- get value with respect to override value
function getOptionValue()
  -- don't clean up playermats if playing a prelude from the list
  if preludeList[scenarioName] then
    return false
  else
    return options["tidyPlayermats"]
  end
end

-- pauses the current coroutine for 'frameCount' frames
function coWaitFrames(frameCount)
  for k = 1, frameCount do
    coroutine.yield(0)
  end
end
