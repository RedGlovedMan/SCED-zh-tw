local guidReferenceApi = require("core/GUIDReferenceApi")
local playAreaApi = require("core/PlayAreaApi")
local searchLib = require("util/SearchLib")

local optionsVisible = false
local options = {
  Agenda = true,
  Playarea = true,
  Playermats = true
}

val = 0

-- save current value and options
function onSave() return JSON.encode({ val, options }) end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    val              = loadedData[1]
    options          = loadedData[2]

    -- restore state for option panel
    for key, bool in pairs(options) do
      self.UI.setAttribute("option" .. key, "isOn", not bool)
    end
  end

  self.createButton({
    label          = tostring(val),
    click_function = "addOrSubtract",
    function_owner = self,
    position       = { 0, 0.06, 0 },
    height         = 800,
    width          = 800,
    font_size      = 650,
    scale          = { 1.5, 1.5, 1.5 },
    font_color     = { 1, 1, 1, 95 },
    color          = { 0, 0, 0, 0 }
  })
end

-- called by the invisible button to change displayed value
function addOrSubtract(_, _, isRightClick)
  local newVal = math.min(math.max(val + (isRightClick and -1 or 1), 0), 99)
  if val ~= newVal then
    updateVal(newVal)
  end
end

-- adds the provided number to the current count
function addVal(number)
  val = val + number
  updateVal(val)
end

-- sets the current count to the provided number
function updateVal(number)
  val = number or 0
  self.editButton({ index = 0, label = tostring(val) })
  if number then
    broadcastDoom(val)
  else
    broadcastToAll("0 doom on the agenda")
  end
end

-- called by updateVal and addVal to broadcast total doom in play, including doom threshold
function broadcastDoom(val)
  local doomInPlayCounter = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DoomInPlayCounter")
  local doomInPlay = doomInPlayCounter.call("countDoomInPlay") + val
  local doomThreshold = getDoomThreshold()

  if doomThreshold then
    broadcastToAll(val .. " doom on the agenda (" .. doomInPlay .. "/" .. doomThreshold .. " in play)")
  else
    broadcastToAll(val .. " doom on the agenda (" .. doomInPlay .. " in play)")
  end
end

-- called by "Reset" button to remove doom
function startReset()
  if options.Agenda then
    -- omitting the number will broadcast a special message just for this case
    updateVal()
  end
  local doomInPlayCounter = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DoomInPlayCounter")
  if doomInPlayCounter then
    doomInPlayCounter.call("removeDoom", options)
  end
end

-- get doom threshold from top card of Agenda deck
function getDoomThreshold()
  local agendaPos = { -2.72, 1.6, 0.37 }
  local searchResult = searchLib.atPosition(agendaPos, "isCardOrDeck")

  if #searchResult == 1 then
    local obj = searchResult[1]
    if obj.type == "Card" then
      return getDoomThresholdFromGMNotes(obj.getGMNotes())
    else
      -- handle agenda deck
      local containedObjects = obj.getData().ContainedObjects
      local topCardData = containedObjects[#containedObjects]
      return getDoomThresholdFromGMNotes(topCardData.GMNotes)
    end
  end
  return nil
end

-- decodes the gm notes and return the doom treshhold
function getDoomThresholdFromGMNotes(notes)
  local metadata = JSON.decode(notes) or {}
  if metadata.doomThresholdPerInvestigator then
    return metadata.doomThresholdPerInvestigator * playAreaApi.getInvestigatorCount() + metadata.doomThreshold
  else
    return metadata.doomThreshold
  end
end

-- XML UI functions
function optionClick(_, optionName)
  options[optionName] = not options[optionName]
  printToAll("Doom removal of " .. optionName .. (options[optionName] and " enabled" or " disabled"))
end

function toggleOptions()
  optionsVisible = not optionsVisible

  if optionsVisible then
    self.UI.show("Options")
  else
    self.UI.hide("Options")
  end
end
