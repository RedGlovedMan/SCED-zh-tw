local deckLib                    = require("util/DeckLib")
local GlobalApi                  = require("core/GlobalApi")
local guidReferenceApi           = require("core/GUIDReferenceApi")
local playAreaApi                = require("core/PlayAreaApi")
local playermatApi               = require("playermat/PlayermatApi")
local searchLib                  = require("util/SearchLib")
local tokenArrangerApi           = require("accessories/TokenArrangerApi")
local tokenChecker               = require("core/token/TokenChecker")
local tokenSpawnTrackerApi       = require("core/token/TokenSpawnTrackerApi")

local ENCOUNTER_DECK_AREA        = {
  upperLeft = { x = 1.05, z = 0.15 },
  lowerRight = { x = 0.70, z = 0.59 }
}
local ENCOUNTER_DISCARD_AREA     = {
  upperLeft = { x = 1.77, z = 0.15 },
  lowerRight = { x = 1.42, z = 0.59 }
}

-- global position of encounter deck and discard pile
local ENCOUNTER_DECK_POS         = { x = -3.93, y = 1, z = 5.76 }
local ENCOUNTER_DISCARD_POSITION = { x = -3.85, y = 1, z = 10.38 }
local isReshuffling              = false
local collisionEnabled           = false
local currentScenario, useFrontData, tokenData, scenarioCard

function updateSave()
  local data = {
    currentScenario = currentScenario,
    useFrontData    = useFrontData,
    tokenData       = tokenData
  }
  if scenarioCard ~= nil then
    data.scenarioCardGuid = scenarioCard.getGUID()
  end
  self.script_state = JSON.encode(data)
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedState = JSON.decode(savedData) or {}
    scenarioCard      = getObjectFromGUID(loadedState.scenarioCardGUID) or nil
    currentScenario   = loadedState.currentScenario or ""
    useFrontData      = loadedState.useFrontData or true
    tokenData         = loadedState.tokenData or {}
  end
  Wait.time(function() collisionEnabled = true end, 0.1)
end

function copyScenarioReferenceCard()
  if scenarioCard == nil then broadcastToAll("No scenario reference card found.", "Red") return end
  
  local usedColors = playermatApi.getUsedMatColors()
  if #usedColors == 0 then broadcastToAll("No investigators placed.", "Red") return end
  for _, color in ipairs(usedColors) do
    local cardPosition = playermatApi.transformLocalPosition({-1.365, 0.1, -0.625}, color)
    local searchResult = searchLib.atPosition(cardPosition, "isCardOrDeck")
    if #searchResult == 0 then
      scenarioCard.clone({position = cardPosition, snap_to_grid = true})
    elseif #searchResult == 1 then
      local obj = searchResult[1]
      local md = JSON.decode(obj.getGMNotes()) or {}
    
      if md.type == "ScenarioReference" then
        local trash = guidReferenceApi.getObjectByOwnerAndType(color, "Trash")
        trash.putObject(obj)
        scenarioCard.clone({position = cardPosition, snap_to_grid = true})
      end
    end
  end
end

---------------------------------------------------------
-- collison and container event handling
---------------------------------------------------------

-- TTS event handler. Handles scenario name event triggering and encounter card token resets.
function onCollisionEnter(collisionInfo)
  if not collisionEnabled then return end

  local object = collisionInfo.collision_object

  -- early exit for better performance (but should exclude Tiles again in 4.0)
  if object.type ~= "Card" and object.type ~= "Tile" then return end

  -- reset spawned tokens and remove tokens from cards in encounter deck / discard area
  local localPos = self.positionToLocal(object.getPosition())
  if inArea(localPos, ENCOUNTER_DECK_AREA) or inArea(localPos, ENCOUNTER_DISCARD_AREA) then
    Wait.frames(function() tokenSpawnTrackerApi.resetTokensSpawned(object) end, 1)
    removeTokensFromObject(object)
    return
  end

  -- get metadata
  local md = JSON.decode(object.getGMNotes()) or {}

  -- get scenario name and maybe fire followup event
  local cardName = object.getName()
  if object.getName() == "Scenario" or md.type == "ScenarioReference" then
    getDataFromReferenceCard(object, cardName, md)
    scenarioCard = object
    if scenarioCard.type == "Card" then
      scenarioCard.setPosition{-3.85, 1.60, -10.39}
    end
  end
end

-- maybe load data from reference card
function getDataFromReferenceCard(card, cardName, md)
  local newScenarioName
  if cardName == "Scenario" then
    newScenarioName = card.getDescription()
  else
    newScenarioName = cardName
  end

  -- detect if a new scenario card is placed down
  if currentScenario ~= newScenarioName then
    currentScenario = newScenarioName
    fireScenarioChangedEvent()
  end

  if not md["tokens"] then
    tokenData = {}
    updateSave()
    return
  end

  -- detect orientation of scenario card (for difficulty)
  useFrontData = not card.is_face_down
  tokenData = md["tokens"][(useFrontData and "front" or "back")]
  fireTokenDataChangedEvent()
end

-- TTS event handler. Handles scenario name event triggering
function onCollisionExit(collisionInfo)
  local object = collisionInfo.collision_object

  -- reset token metadata if scenario reference card is removed
  if object == scenarioCard then
    tokenData = {}
    useFrontData = nil
    scenarioCard = nil
    fireTokenDataChangedEvent()
  end
end

-- Listens for cards entering the encounter deck or encounter discard, discards tokens on them,
-- and resets the spawn state for the cards when they do.
function onObjectEnterContainer(container, object)
  local localPos = self.positionToLocal(container.getPosition())
  if inArea(localPos, ENCOUNTER_DECK_AREA) or inArea(localPos, ENCOUNTER_DISCARD_AREA) then
    tokenSpawnTrackerApi.resetTokensSpawned(object)
    removeTokensFromObject(object)
  end
end

-- fires if the scenario title changes
function fireScenarioChangedEvent()
  -- maybe show the title splash screen
  Wait.frames(function() GlobalApi.titleSplash(currentScenario) end, 20)

  -- set the scenario for the playarea (connections might be disabled)
  playAreaApi.onScenarioChanged(currentScenario)

  -- maybe update the playarea image
  local playAreaImageSelector = guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaImageSelector")
  playAreaImageSelector.call("maybeUpdatePlayAreaImage", currentScenario)

  -- reset the token spawning for locations
  tokenSpawnTrackerApi.resetAllLocations()
end

-- fires if the scenario title or the difficulty changes
function fireTokenDataChangedEvent()
  local fullData = returnTokenData()
  tokenArrangerApi.onTokenDataChanged(fullData)
  updateSave()
end

-- returns the chaos token metadata (if provided)
function returnTokenData()
  return {
    tokenData       = tokenData,
    currentScenario = currentScenario,
    useFrontData    = useFrontData
  }
end

---------------------------------------------------------
-- encounter card drawing
---------------------------------------------------------

-- gets the encounter deck (for internal functions and Api calls)
function getEncounterDeck()
  local searchResult = searchLib.atPosition(ENCOUNTER_DECK_POS, "isCardOrDeck")

  if #searchResult > 0 then
    return searchResult[1]
  end
end

-- 'params' contains the position, rotation and a boolean to force a faceup draw
function drawEncounterCard(params)
  local encounterDeck = getEncounterDeck()
  local reshuffledAlready

  if encounterDeck then
    reshuffledAlready = false
    if encounterDeck.type == "Deck" then
      actualEncounterCardDraw(encounterDeck.takeObject(), params)
    else
      actualEncounterCardDraw(encounterDeck, params)
    end
  else
    -- nothing here, time to reshuffle
    if reshuffledAlready == true then
      reshuffledAlready = false
      return
    end

    -- if there is no discard pile either, reshuffleEncounterDeck will give an error message already
    local success = reshuffleEncounterDeck()

    -- only continue if there was a discard pile
    if not success then return end
    reshuffledAlready = true
    drawEncounterCard(params)
  end
end

-- draw the provided card to the requesting playermat
function actualEncounterCardDraw(card, params)
  local metadata = JSON.decode(card.getGMNotes()) or {}
  local DATA_HELPER = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DataHelper")

  -- draw hidden cards facedown
  local faceUpRotation = 0
  if metadata.hidden or DATA_HELPER.call('checkHiddenCard', card.getName()) then
    faceUpRotation = 180
  end

  local rot = playermatApi.returnRotation(params.matColor):setAt("z", faceUpRotation)
  deckLib.placeOrMergeIntoDeck(card, params.position, rot)
end

-- gets the discard pile and shuffles it into the encounter deck
---@return boolean: Whether the operation was successfully performed
function reshuffleEncounterDeck()
  -- flag to avoid multiple calls
  if isReshuffling then
    return false
  end
  isReshuffling = true

  -- disable flag after 1s delay
  Wait.time(function() isReshuffling = false end, 1)

  local encounterDeck = getEncounterDeck()
  local discardPile = searchLib.atPosition(ENCOUNTER_DISCARD_POSITION, "isCardOrDeck")

  if #discardPile > 0 then
    local discardDeck = discardPile[1]

    -- flips discard pile
    if not discardDeck.is_face_down then
      discardDeck.setRotation({ 0, -90, 180 })
    end

    -- make a new encounter deck
    if encounterDeck == nil then
      discardDeck.setPosition(Vector(ENCOUNTER_DECK_POS) + Vector({ 0, 1, 0 }))
      encounterDeck = discardDeck
    else
      encounterDeck.putObject(discardDeck)
    end
    encounterDeck.shuffle()
    broadcastToAll("Shuffled encounter discard into deck.", "White")
    return true
  else
    broadcastToAll("Encounter discard pile is already empty.", "Red")
    return false
  end
end

---------------------------------------------------------
-- helper functions
---------------------------------------------------------

-- Simple method to check if the given point is in a specified area
---@param point tts__Vector Point to check, only x and z values are relevant
---@param bounds table Defined area to see if the point is within
---@return boolean: True if the point is in the area defined by bounds
function inArea(point, bounds)
  return (point.x < bounds.upperLeft.x
    and point.x > bounds.lowerRight.x
    and point.z > bounds.upperLeft.z
    and point.z < bounds.lowerRight.z)
end

-- removes tokens from the provided card/deck
function removeTokensFromObject(object)
  local TRASH = guidReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  for _, obj in ipairs(searchLib.onObject(object, "isTileOrToken")) do
    if obj.getGUID() ~= "4ee1f2" and -- table
        obj ~= self and
        obj.memo ~= nil and
        obj.getLock() == false and
        not tokenChecker.isChaosToken(obj) then
      TRASH.putObject(obj)
    end
  end
end
