local playermatApi    = require("playermat/PlayermatApi")
local searchLib       = require("util/SearchLib")
local tokenManagerApi = require("core/token/TokenManagerApi")

local TOKEN_INDEX     = {}
TOKEN_INDEX[1]        = "universalActionAbility"
TOKEN_INDEX[3]        = "resourceCounter"
TOKEN_INDEX[4]        = "damage"
TOKEN_INDEX[5]        = "path"
TOKEN_INDEX[6]        = "horror"
TOKEN_INDEX[7]        = "doom"
TOKEN_INDEX[8]        = "clue"
TOKEN_INDEX[9]        = "resource"

---@param index number Index of the pressed key
---@param playerColor string Color of the triggering player
function onScriptingButtonDown(index, playerColor)
  local tokenType = TOKEN_INDEX[index]
  if not tokenType then return end

  local position = Player[playerColor].getPointerPosition() + Vector(0, 0.2, 0)
  local rotation = Vector(0, Player[playerColor].getPointerRotation(), 0)
  callbackName = nil
  callbackParams = nil

  -- check for subtype of resource based on card below
  if tokenType == "resource" then
    local card = getTargetCard(playerColor, position)

    if card and not card.is_face_down then
      local status = addUseToCard(card, tokenType)
      if status == true then return end
    end

    -- check hovered object for location data or 'uses (x clues)' and add one
  elseif tokenType == "clue" then
    local card = getTargetCard(playerColor, position)

    if card and (not card.is_face_down or card.hasTag("Location")) then
      local status = addUseToCard(card, tokenType)
      if status == true then return end
    end

    -- check hovered object for "resourceCounter" tokens and increase them instead
  elseif tokenType == "resourceCounter" then
    local hoverObj = Player[playerColor].getHoverObject()
    if hoverObj then
      if tokenType == hoverObj.getMemo() then
        hoverObj.call("addOrSubtract")
        return
      end
    end

    -- check hovered object for "damage" and "horror" tokens and increase them instead
  elseif tokenType == "damage" or tokenType == "horror" then
    local hoverObj = Player[playerColor].getHoverObject()
    if hoverObj then
      if tokenType == hoverObj.getMemo() then
        local stateInfo = hoverObj.getStates()
        local stateId = hoverObj.getStateId()
        if stateId <= #stateInfo then
          hoverObj.setState(stateId + 1)
          return
        end
      end
    end

    -- check for nearest investigator card and change action token state to its class
  elseif tokenType == "universalActionAbility" then
    local matColor = playermatApi.getMatColorByPosition(position)
    local activeInvestigatorData = playermatApi.getActiveInvestigatorData(matColor)
    rotation = playermatApi.returnRotation(matColor)
    callbackName = "updateUniversalActionAbilityToken"
    callbackParams = { class = activeInvestigatorData.class, symbol = activeInvestigatorData.class }
  end

  tokenManagerApi.spawnToken(position, tokenType, rotation, callbackName, callbackParams)
end

-- gets the target card for this operation
---@param playerColor string Color of the triggering player
---@param position tts__Vector Position to check for a card (if there isn't a hovered card)
function getTargetCard(playerColor, position)
  local hoverObj = Player[playerColor].getHoverObject()
  if hoverObj and hoverObj.type == "Card" then
    return hoverObj
  elseif hoverObj then
    -- use the first card below the hovered object if it's not a card
    for _, obj in ipairs(searchLib.belowPosition(position, "isCard")) do
      return obj
    end
  end
end

-- adds a use to a card (TODO: probably move this to the TokenManager?)
---@param card tts__Object Card that should get a use added
---@param useType string Type of uses to be added
function addUseToCard(card, useType)
  local metadata = JSON.decode(card.getGMNotes()) or {}

  -- get correct data for location
  if metadata.type == "Location" then
    if not card.is_face_down and metadata.locationFront ~= nil then
      metadata = metadata.locationFront
    elseif metadata.locationBack ~= nil then
      metadata = metadata.locationBack
    end

    -- if there are no uses at all, add "empty" uses for fake replenishing (only for clues)
    if metadata.uses == nil then
      metadata.uses = { { token = "clue" } }
    end
  end

  local match = false
  for _, useInfo in ipairs(metadata.uses or {}) do
    if useInfo.token == useType then
      -- artificially create replenish data to re-use that existing functionality
      useInfo.count = 999
      useInfo.replenish = 1
      match = true
    else
      -- artificially disable other uses from replenishing
      useInfo.replenish = nil
    end
  end

  -- if matching uses were found, perform the "fake" replenish
  if match then
    tokenManagerApi.maybeReplenishCard(card, metadata.uses)
    return true
  else
    return false
  end
end
